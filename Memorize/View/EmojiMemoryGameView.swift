//
//  EmojiMemoryGameView.swift
//  Memorize
//
//  Created by –í–∞–ª–µ—Ä–∏–π –ò–≥–Ω–∞—Ç—å–µ–≤ on 18.04.21.
//

import SwiftUI

struct EmojiMemoryGameView: View {
    
    //‚Äú–æ–±–µ—Ä—Ç–∫–∞ —Å–≤–æ–π—Å—Ç–≤–∞‚Äù @ObservedObject –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è objectWillChange
    //—ç—Ç–æ—Ç View —Å–µ–±—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç
    @ObservedObject var viewModelGame: EmojiMemoryGame
    
    // –°–≤–æ–π—Å—Ç–≤–æ var —Å –∏–º–µ–Ω–µ–º body –∏ –¢–ò–ü–û–ú some View –µ—â—ë –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ —Ç–µ–º, —è–≤–ª—è–µ—Ç—Å—è –≤—ã—á–∏—Å–ª—è–µ–º–æ–π (computed)
    var body: some View {
        VStack {
            Grid(viewModelGame.cards) { card in
                CardView(card: card)
                    .onTapGesture { viewModelGame.choose(card) }
                    .padding(4)
            }
            bottomPanel()
        }
        .padding(3)
        .padding([.bottom], 20)
        .foregroundColor(themeApp.color)
        .ignoresSafeArea(.all, edges: .bottom)
    }
    
    private func bottomPanel() -> some View {
        ZStack{
            HStack {
                nameThemePlusContexMenu()
                Spacer()
                Text("Score:")
                Text(viewModelGame.updateScore())
                    .frame(minWidth: 25, alignment: .trailing)
            }
            .padding([.leading, .trailing], .some(7))
            HStack {
                Button(" NEW GAME ", action: viewModelGame.newGame)
                    .font(.title.weight(.light))
                    .padding(7)
                    .background(themeApp.color)
                    .cornerRadius(Constants.cornerRadius)
                    .foregroundColor(.colorText)
            }
        }
    }
    
    private func nameThemePlusContexMenu() -> some View {
        Text(themeApp.name)
            .contextMenu {
                Text("Easy level")
                Button("üßö‚Äç‚ôÄÔ∏è   Children") {
                    themeApp = ThemeFactory.createTheme(type: .child)
                    viewModelGame.newGame()
                }
                Button("üê∂   Animal") {
                    themeApp = ThemeFactory.createTheme(type: .animal)
                    viewModelGame.newGame()
                }
                Text("Middle level")
                Button("ü¶ú   Zoo") {
                    themeApp = ThemeFactory.createTheme(type: .zoo)
                    viewModelGame.newGame()
                }
                Button("üßõüèº   Halloween") {
                    themeApp = ThemeFactory.createTheme(type: .halloween)
                    viewModelGame.newGame()
                }
                Button("üèÄ   Sport (random)") {
                    themeApp = ThemeFactory.createTheme(type: .sport)
                    viewModelGame.newGame()
                }
                Text("–°heck yourself")
                Button("üá∫üá¶   Flags") {
                    themeApp = ThemeFactory.createTheme(type: .flags)
                    viewModelGame.newGame()
                }
            }
    }
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã
struct CardView: View {
    
    var card: MemoryGame<String>.Card
    
    var body: some View {
        GeometryReader { geometry in
            bodyForCard(for: geometry.size)
        }
    }
    
    private func bodyForCard(for size: CGSize) -> some View {
        return ZStack {
            if card.isFaceUp {
                RoundedRectangle(cornerRadius: Constants.cornerRadius)
                    // –ï—Å—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∏ —ç—Ç–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —è–≤–ª—è–µ—Ç—Å—è —Ü–≤–µ—Ç Color
                    .fill(Color.white)
                RoundedRectangle(cornerRadius: Constants.cornerRadius)
                    // –ú–æ–≥—É—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö ‚Äî —à–∏—Ä–∏–Ω–∞ –ª–∏–Ω–∏–∏ –æ–±–≤–æ–¥–∫–∏ lineWdth.
                    .stroke(lineWidth: Constants.edgeLineWidth)
                Text(card.content)
            } else {
                if !card.isMatched {
                    RoundedRectangle(cornerRadius: Constants.cornerRadius).fill()
                }
            }
        }
        .font(.system(size: Constants.fontSize(for: size)))
    }
}

// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –∫–æ–¥–æ–º, –∏ –æ–±–ª–∞—Å—Ç—å—é —Å–ø—Ä–∞–≤–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è Preview.
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        EmojiMemoryGameView(viewModelGame: EmojiMemoryGame())
            .preferredColorScheme(.dark)
    }
}
